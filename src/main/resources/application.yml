spring:
  application:
    name: ${SPRING_APPLICATION_NAME:hdsp-quality}
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hdsp.hand.com:23306/hdsp_quality?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username: ${SPRING_DATASOURCE_USERNAME:hdsp_dev}
    password: ${SPRING_DATASOURCE_PASSWORD:hdsp_dev123$%^}
    driver-class-name: com.mysql.jdbc.Driver
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: ${SPRING_REDIS_HOST:redis.hdsp.hand.com}
    port: ${SPRING_REDIS_PORT:26379}
    database: ${SPRING_REDIS_DATABASE:1}
    password: ${SPRING_REDIS_PASSWORD:}
    lettuce:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}

  servlet:
    multipart:
      # 是否支持多部分上传
      enabled: true
      # 最大支持文件上传的大小
      max-file-size: 300MB
      # 支持请求最大文件上传的大小
      max-request-size: 300MB
  web:
    resources:
      # 资源缓存时间，单位秒
      cache:
        period: 3600
      chain:
        # 开启压缩
        compressed: true
        # 启用缓存
        cache: true

server:
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
      # 默认值为8，建议设置每个CPU核心一个线程
      io: ${SERVER_UNDERTOW_IO_THREADS:4}
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
      # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
      worker: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    # 默认false
    direct-buffers: true
    # HTTP POST请求最大的大小
    # 默认0，无限制，可设置10M
    max-http-post-size: 10485760
    allow-unescaped-characters-in-url: true

feign:
  circuitbreaker:
    # 启用断路器
    enabled: ${FEIGN_CIRCUITBREAKER_ENABLED:true}
  # 请求压缩配置
  compression:
    request:
      # 配置请求GZIP压缩
      enabled: ${FEIGN_COMPRESSION_REQUEST_ENABLED:true}
      # 配置压缩数据大小的下限
      min-request-size: ${FEIGN_COMPRESSION_REQUEST_MIN_REQUEST_SIZE:2048}
  # Feign客户端配置
  client:
    config:
      # Feign客户端默认配置
      default:
        # 连接超时
        connectTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_CONNECT_TIMEOUT:2000}
        # 读取超时
        readTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_READ_TIMEOUT:5000}
        # Feign日志级别：NONE/BASIC/HEADERS/FULL
        loggerLevel: ${FEIGN_CLIENT_CONFIG_DEFAULT_LOGGER_LEVEL:FULL}

mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true


hzero:
  import:
    transactionControl: true
    batch-size: 3000
  lov:
    value:
      enabled: true
  service:
    register:
      name: ${HZERO_SERVICE_REGISTER_NAME:hzero-register}
    gateway:
      name: ${HZERO_SERVICE_GATEWAY_NAME:hzero-gateway}
    config:
      name: ${HZERO_SERVICE_CONFIG_NAME:hzero-config}
    oauth:
      name: ${HZERO_SERVICE_OAUTH_NAME:hzero-oauth}
    iam:
      name: ${HZERO_SERVICE_IAM_NAME:hzero-iam}
    swagger:
      name: ${HZERO_SERVICE_SWAGGER_NAME:hzero-swagger}
    governance:
      name: ${HZERO_SERVICE_GOVERNANCE_NAME:hzero-governance}
    platform:
      name: ${HZERO_SERVICE_PLATFORM_NAME:hzero-platform}
    file:
      name: ${HZERO_SERVICE_FILE_NAME:hzero-file}
    message:
      name: ${HZERO_SERVICE_MESSAGE_NAME:hzero-message}
    scheduler:
      name: ${HZERO_SERVICE_SCHEDULER_NAME:hzero-scheduler}
    import:
      name: ${HZERO_SERVICE_IMPORT_NAME:hzero-import}
    interface:
      name: ${HZERO_SERVICE_INTERFACE_NAME:hzero-interface}
    workflow-plus:
      name: ${HZERO_SERVICE_WORKFLOW_PLUS_NAME:hzero-workflow-plus}
    transfer:
      name: ${HZERO_SERVICE_TRANSFER_NAME:hzero-transfer}
    admin:
      name: ${HZERO_SERVICE_ADMIN_NAME:hzero-admin}
    report:
      name: ${HZERO_SERVICE_REPORT_NAME:hzero-report}

hdsp:
  workflow:
    enabled: true
  # 提取信息
  route-data:
    service-short: ${HDSP_ROUTE_DATA_SERVICE_SHORT:xqua}
    service-id: ${HDSP_ROUTE_DATA_SERVICE_ID:hdsp-quality}
  # 请求签名
  access:
    sign:
      urlSuffix: ${HDSP_ACCESS_SIGN_URL_SUFFIX:/v1/.*}
      excludeUrlSuffix: ${HDSP_ACCESS_SIGN_EXCLUDE_URL_SUFFIX:/v2/.*}
      initTokenNum: ${HDSP_ACCESS_SIGN_INIT_TOKEN_NUM:10}
      enabled: ${HDSP_ACCESS_SIGN_ENABLED:false}
  service:
    core: ${HDSP_CORE_SERVICE:hdsp-core}
    dispatch: ${HDSP_DISPATCH_SERVICE:hdsp-dispatch}
    ops: ${HDSP_OPS_SERVICE:hdsp-ops}
    preview: ${HDSP_PREVIEW_FILE_SERVICE:hdsp-file-preview}

jasypt:
  encryptor:
    password: ${JASYPT_ENCRYPTOR_PASSWORD:hUyhdphl2gXcBDEH5dy}
    string-output-type: "hexadecimal"

logging:
  level:
    org.apache.ibatis: ${LOGGING_LEVEL:debug}
    io.choerodon: ${LOGGING_LEVEL:debug}
    org.hzero: ${LOGGING_LEVEL:debug}
    com.hand.hdsp: ${LOGGING_LEVEL:debug}
  config: classpath:logback-hdsp.xml

plugin:
  run-mode: prod
  plugin-path: ${PLUGIN_PATH:plugins/${spring.application.name}/plugins/}
  plugin-config-file-path: ${PLUGIN_CONFIG_FILE_PATH:plugins/${spring.application.name}/pluginConfig}